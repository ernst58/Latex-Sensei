#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define MAX 1000

void generateRandomNumbers(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        arr[i] = rand() % 1000; // Random number between 0 and 999
    }
}

void printArray(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

void bubbleSort(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
        printf("Step %d: ", i + 1);
        printArray(arr, n);
    }
}

void insertionSort(int arr[], int n) {
    for (int i = 1; i < n; i++) {
        int key = arr[i];
        int j = i - 1;
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j--;
        }
        arr[j + 1] = key;
        printf("Step %d: ", i);
        printArray(arr, n);
    }
}

void quickSort(int arr[], int low, int high) {
    if (low < high) {
        int pivot = arr[high];
        int i = low - 1;
        for (int j = low; j < high; j++) {
            if (arr[j] < pivot) {
                i++;
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
        int temp = arr[i + 1];
        arr[i + 1] = arr[high];
        arr[high] = temp;

        int pi = i + 1;
        printf("Pivot at index %d: ", pi);
        printArray(arr, high + 1);

        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

void heapify(int arr[], int n, int i) {
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    if (left < n && arr[left] > arr[largest])
        largest = left;
    if (right < n && arr[right] > arr[largest])
        largest = right;

    if (largest != i) {
        int temp = arr[i];
        arr[i] = arr[largest];
        arr[largest] = temp;
        heapify(arr, n, largest);
    }
}

void heapSort(int arr[], int n) {
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i);

    for (int i = n - 1; i >= 0; i--) {
        int temp = arr[0];
        arr[0] = arr[i];
        arr[i] = temp;
        heapify(arr, i, 0);
        printf("Step %d: ", n - i);
        printArray(arr, n);
    }
}

void radixSort(int arr[], int n) {
    int max = arr[0];
    for (int i = 1; i < n; i++) {
        if (arr[i] > max)
            max = arr[i];
    }
    for (int exp = 1; max / exp > 0; exp *= 10) {
        int output[n], count[10] = {0};
        for (int i = 0; i < n; i++)
            count[(arr[i] / exp) % 10]++;
        for (int i = 1; i < 10; i++)
            count[i] += count[i - 1];
        for (int i = n - 1; i >= 0; i--) {
            output[count[(arr[i] / exp) % 10] - 1] = arr[i];
            count[(arr[i] / exp) % 10]--;
        }
        for (int i = 0; i < n; i++)
            arr[i] = output[i];
        printf("Step exp %d: ", exp);
        printArray(arr, n);
    }
}

int main() {
    srand(time(0));
    int n, sortChoice, sortMethod;
    int arr[MAX];

    printf("Student ID: 123456\n");
    printf("First Name: John\n");
    printf("Last Name: Doe\n");
    
    while (1) {
        printf("\nEnter number of random values: ");
        scanf("%d", &n);
        
        generateRandomNumbers(arr, n);
        printf("Generated Numbers: ");
        printArray(arr, n);
        
        printf("Do you want to sort the numbers? (1-Yes, 0-No): ");
        scanf("%d", &sortChoice);
        
        if (sortChoice == 1) {
            printf("\nSorting Menu:\n");
            printf("1. Insertion Sort\n");
            printf("2. Bubble Sort\n");
            printf("3. Quick Sort\n");
            printf("4. Heap Sort\n");
            printf("5. Radix Sort\n");
            printf("6. Exit\n");
            printf("Choose sorting method: ");
            scanf("%d", &sortMethod);
            
            if (sortMethod == 6) {
                printf("Exiting program...\n");
                break;
            }
            
            switch (sortMethod) {
                case 1:
                    printf("Sorting data using Insertion Sort...\n");
                    insertionSort(arr, n);
                    break;
                case 2:
                    printf("Sorting data using Bubble Sort...\n");
                    bubbleSort(arr, n);
                    break;
                case 3:
                    printf("Sorting data using Quick Sort...\n");
                    quickSort(arr, 0, n - 1);
                    break;
                case 4:
                    printf("Sorting data using Heap Sort...\n");
                    heapSort(arr, n);
                    break;
                case 5:
                    printf("Sorting data using Radix Sort...\n");
                    radixSort(arr, n);
                    break;
                default:
                    printf("Invalid sorting method.\n");
            }
            printf("Sorted Numbers: ");
            printArray(arr, n);
        }
    }
    return 0;
}
